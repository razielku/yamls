apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: dcp-kafka
  labels:
    com.datadoghq.ad.check.id: Kafka
  annotations:
    ad.datadoghq.com/kafka.check_names: '["kafka"]'
    ad.datadoghq.com/kafka.init_configs: '[{"is_jmx": true, "collect_default_metrics": true, "new_gc_metrics":true}]'
    ad.datadoghq.com/kafka.instances: '[{"host": "%%host%%","port":"9999"}]'
    ad.datadoghq.com/zookeeper.check_names: '["zookeeper"]'
    ad.datadoghq.com/zookeeper.init_configs: '[{"is_jmx": true, "collect_default_metrics": true, "new_gc_metrics":true}]'
    ad.datadoghq.com/zookeeper.instances: '[{"host": "%%host%%","port":"9999"}]'
spec:
  kafka:
    version: 3.0.0
    replicas: 1
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
      inter.broker.protocol.version: "3.0"
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: 100Gi
        deleteClaim: false
    jmxOptions: {}
    template:
      statefulset:
        metadata:
          labels:
            cl: dcp
            env: qa
  zookeeper:
    replicas: 1
    storage:
      type: persistent-claim
      size: 100Gi
      deleteClaim: false
    jmxOptions: {}
    template:
      statefulset:
        metadata:
          labels:
            cl: dcp
            env: qa
  entityOperator:
    topicOperator: {}
    userOperator: {}
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
